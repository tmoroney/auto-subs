name: Package AutoSubs for MacOS
on:
  release:
    types:
      - created

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-15
            arch: arm64
            target: aarch64-apple-darwin
            features: mac-aarch
            pkg_suffix: ARM
          - platform: macos-13
            arch: x86_64
            target: x86_64-apple-darwin
            features: mac-x86_64
            pkg_suffix: Intel

    runs-on: ${{ matrix.platform }}

    steps:
    - name: Checkout AutoSubs Repo Code
      uses: actions/checkout@v4
        
    - name: Setup Node
      uses: actions/setup-node@v4
      with:
        node-version: 24

    - name: Install Rust stable and targets
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Import Apple Certificates
      env:
        APP_CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
        APP_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE }}
        INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_NOTARIZE_KEY: ${{ secrets.APPLE_NOTARIZE_KEY }}
        APPLE_NOTARIZE_ID: ${{ secrets.APPLE_NOTARIZE_ID }}
        APPLE_ISSUER: ${{ secrets.APPLE_ISSUER }}

      run: |
        # Define paths
        APP_CERT_PATH=$RUNNER_TEMP/app_certificate.p12
        INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Decode and save certificates
        echo "$APP_CERTIFICATE_BASE64" | base64 --decode > $APP_CERT_PATH
        echo "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode > $INSTALLER_CERT_PATH

        # Create and configure temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security list-keychains -s $KEYCHAIN_PATH

        # Import Application certificate
        security import $APP_CERT_PATH -P "$APP_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import Installer certificate
        security import $INSTALLER_CERT_PATH -P "$INSTALLER_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import Notarization credentials
        echo "$APPLE_NOTARIZE_KEY" | base64 --decode > Notarization_AuthKey.p8
        xcrun notarytool store-credentials "AC_PASSWORD" \
          --key "Notarization_AuthKey.p8" \
          --key-id "$APPLE_NOTARIZE_ID" \
          --issuer "$APPLE_ISSUER"
      
    - name: Install Dependencies
      run: |
        cd AutoSubs-App
        npm install

    - name: Download ffmpeg/ffprobe binaries
      run: |
        set -euo pipefail
        cd AutoSubs-App/src-tauri
        mkdir -p binaries
        cd binaries

        # Determine architecture and corresponding asset names from matrix
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          ZIP_NAME="ffmpeg-aarch64-apple-darwin.zip"
          FFMPEG_SRC="ffmpeg-aarch64-apple-darwin"
          FFPROBE_SRC="ffprobe-aarch64-apple-darwin"
        else
          # Fallback to x86_64 naming if runner arch isn't arm64
          ZIP_NAME="ffmpeg-x86_64-apple-darwin.zip"
          FFMPEG_SRC="ffmpeg-x86_64-apple-darwin"
          FFPROBE_SRC="ffprobe-x86_64-apple-darwin"
        fi

        # Download the appropriate archive from the ffmpeg-binaries repo
        gh release download \
          --repo tmoroney/ffmpeg-binaries \
          --pattern "$ZIP_NAME" \
          --clobber

        # Unzip directly into current folder (junk paths to avoid nested dirs)
        unzip -jo "$ZIP_NAME"

        # Ensure executables (keep architecture-specific names expected by Tauri v2)
        chmod +x "$FFMPEG_SRC" "$FFPROBE_SRC"

        # Cleanup archive
        rm -f "$ZIP_NAME"

    - name: Bundle Tauri App
      run: |
        cd AutoSubs-App
        export APPLE_SIGNING_IDENTITY="Developer ID Application: ${{ secrets.APPLE_IDENTITY }}"
        export TAURI_SIGNING_PRIVATE_KEY="${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}"
        export TAURI_SIGNING_PRIVATE_KEY_PASSWORD="${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}"
        # Build with explicit features and explicit Rust target from matrix
        npm run tauri build -- --target "${{ matrix.target }}" -- --no-default-features --features "${{ matrix.features }}"

    - name: Create Mac Package
      run: |
        # Create the package directory
        mkdir Mac-Package/Payload

        # Move the app to the package
        mv AutoSubs-App/src-tauri/target/${{ matrix.target }}/release/bundle/macos/AutoSubs.app Mac-Package/Payload

    - name: Create PKG Installer
      run: |
        # Give permissions to the scripts
        chmod +x Mac-Package/Scripts/*

        # Create the package
        # Resolve version from the GitHub Release tag (strip leading 'v' if present)
        VERSION="${{ github.event.release.tag_name }}"
        VERSION=${VERSION#v}

        pkgbuild --identifier com.tom-moroney.autosubs \
          --version "$VERSION" \
          --install-location "/Applications" \
          --root Mac-Package/Payload \
          --scripts Mac-Package/Scripts \
          AutoSubs-unsigned.pkg

    - name: Sign PKG Installer
      run: |
        productsign --sign "Developer ID Installer: ${{ secrets.APPLE_IDENTITY }}" \
          --timestamp \
          "AutoSubs-unsigned.pkg" \
          "AutoSubs-Mac-${{ matrix.pkg_suffix }}.pkg"

    - name: Notarize PKG Installer
      run: |
        # Function to notarize and staple the package
        notarize_and_staple() {
          xcrun notarytool submit "AutoSubs-Mac-${{ matrix.pkg_suffix }}.pkg" \
            --keychain-profile "AC_PASSWORD" \
            --wait
        
          xcrun stapler staple "AutoSubs-Mac-${{ matrix.pkg_suffix }}.pkg"
        }
        
        # Try notarization up to 3 times in case of bus error
        for i in {1..3}; do
          notarize_and_staple && break || {
            echo "Notarization attempt $i failed. Retrying..."
            sleep 10
          }
        done

    - name: Collect Tauri Updater Artifacts (macOS)
      run: |
        set -euo pipefail
        # Paths
        MACOS_BUNDLE_DIR="AutoSubs-App/src-tauri/target/${{ matrix.target }}/release/bundle/macos"
        ROOT_BUNDLE_DIR="AutoSubs-App/src-tauri/target/${{ matrix.target }}/release/bundle"
        OUT_DIR="release-artifacts"

        mkdir -p "$OUT_DIR"

        # Required updater artifacts for macOS (upload only once to avoid overwriting between matrix builds)
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          if [ -f "$MACOS_BUNDLE_DIR/AutoSubs.app.tar.gz" ]; then
            cp "$MACOS_BUNDLE_DIR/AutoSubs.app.tar.gz" "$OUT_DIR/"
          else
            echo "ERROR: Updater archive AutoSubs.app.tar.gz not found in $MACOS_BUNDLE_DIR" >&2
            exit 1
          fi

          if [ -f "$MACOS_BUNDLE_DIR/AutoSubs.app.tar.gz.sig" ]; then
            cp "$MACOS_BUNDLE_DIR/AutoSubs.app.tar.gz.sig" "$OUT_DIR/"
          else
            echo "ERROR: Updater signature AutoSubs.app.tar.gz.sig not found in $MACOS_BUNDLE_DIR" >&2
            exit 1
          fi
        else
          echo "Skipping updater tar.gz and sig on non-arm64 variant to avoid overwriting."
        fi
    
    - name: Create latest.json for Updater
      id: create_json
      shell: bash
      if: matrix.arch == 'arm64' # Only run once to avoid conflicts
      run: |
          set -euo pipefail
          # Get the release tag name and sanitize it for the version number
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          
          # Get the release notes (body) from the GitHub release event
          RELEASE_NOTES="${{ github.event.release.body }}"
  
          # Create a new JSON object for the updater using the "notes" field
          JSON_OUTPUT=$(jq -n \
            --arg version "$VERSION" \
            --arg pub_date "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --arg notes "$RELEASE_NOTES" \
            '{
              "version": $version,
              "pub_date": $pub_date,
              "notes": $notes,
              "platforms": {
                "macos-x86_64": {
                  "signature": "SIGNATURE_GOES_HERE",
                  "url": "https://github.com/tmoroney/auto-subs/releases/download/${{ github.event.release.tag_name }}/AutoSubs-Mac-Intel.pkg"
                },
                "macos-aarch64": {
                  "signature": "SIGNATURE_GOES_HERE",
                  "url": "https://github.com/tmoroney/auto-subs/releases/download/${{ github.event.release.tag_name }}/AutoSubs-Mac-ARM.pkg"
                }
              }
            }')
  
          # Save the JSON to a file
          echo "$JSON_OUTPUT" > latest.json

    - name: Upload Assets to Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          AutoSubs-Mac-${{ matrix.pkg_suffix }}.pkg
          release-artifacts/*
          latest.json
        token: ${{ secrets.GH_TOKEN }}
        tag_name: ${{ github.event.release.tag_name }}